ukf_filter_node:

    frequency: 50.0

    # The period, in seconds, after which we consider a sensor to have timed out. In this event, we carry out a predict
    # cycle on the EKF without correcting it. This parameter can be thought of as the minimum frequency with which the
    # filter will generate new output. Defaults to 1 / frequency if not specified.
    sensor_timeout: 0.1

    # ekf_localization_node and ukf_localization_node both use a 3D omnidirectional motion model. If this parameter is
    # set to true, no 3D information will be used in your state estimate. Use this if you are operating in a planar
    # environment and want to ignore the effect of small variations in the ground plane that might otherwise be detected
    # by, for example, an IMU. Defaults to false if unspecified.
    two_d_mode: true

    transform_timeout: 0.0


    print_diagnostics: true


    debug: false

    debug_out_file: /path/to/debug/file.txt

    permit_corrected_publication: false

    publish_acceleration: false

    publish_tf: true

    # REP-105 (http://www.ros.org/reps/rep-0105.html) specifies four principal coordinate frames: base_link, odom, map, and

    map_frame: map              # Defaults to "map" if unspecified
    odom_frame: odom            # Defaults to "odom" if unspecified
    base_link_frame: base_link  # Defaults to "base_link" if unspecified
    world_frame: odom           # Defaults to the value of odom_frame if unspecified

    odom0: /odom

    odom0_config: [true,  true,  false,
                    false, false, false,
                    true, true, false,
                    false, false, true,
                    false, false, false]



    odom0_differential: false

    odom0_relative: true

    odom0_pose_rejection_threshold: 5.0
    odom0_twist_rejection_threshold: 1.0

    # Further input parameter examples
    #odom1: rtabmap/odom
    #odom1_config: [true, true, true,
    #                true, true, true,
    #                true, true, true,
    #                true, true, true,
    #                true, true, true]
    #odom1_differential: false
    #odom1_relative: true
    #odom1_queue_size: 10
    #odom1_pose_rejection_threshold: 1000
    #odom1_twist_rejection_threshold: 1000
    #odom1_nodelay: false


    odom1: /odometry/gps

    odom1_config: [true,  true,  false,
                    false, false, false,
                    false, false, false,
                    false, false, false,
                    false, false, false]


    odom1_queue_size: 5

    odom1_nodelay: false

    odom1_differential: false

    odom1_relative: false



    imu0: imu/data
    imu0_config: [false, false, false,
                    true,  true,  true,
                    false, false, false,
                    true,  true,  true,
                    true,  true,  true]
    imu0_nodelay: true
    imu0_differential: false
    imu0_relative: true
    imu0_queue_size: 10
    imu0_pose_rejection_threshold: 0.8                 # Note the difference in parameter names
    imu0_twist_rejection_threshold: 0.8                #
    imu0_linear_acceleration_rejection_threshold: 0.8  #

    # [ADVANCED] Some IMUs automatically remove acceleration due to gravity, and others don't. If yours doesn't, please set
    # this to true, and *make sure* your data conforms to REP-103, specifically, that the data is in ENU frame.
    imu0_remove_gravitational_acceleration: true

    # [ADVANCED]  The EKF and UKF models follow a standard predict/correct cycle. During prediction, if there is no
    # acceleration reference, the velocity at time t+1 is simply predicted to be the same as the velocity at time t. During
    # correction, this predicted value is fused with the measured value to produce the new velocity estimate. This can be
    # problematic, as the final velocity will effectively be a weighted average of the old velocity and the new one. When
    # this velocity is the integrated into a new pose, the result can be sluggish covergence. This effect is especially
    # noticeable with LIDAR data during rotations. To get around it, users can try inflating the process_noise_covariance
    # for the velocity variable in question, or decrease the  variance of the variable in question in the measurement
    # itself. In addition, users can also take advantage of the control command being issued to the robot at the time we
    # make the prediction. If control is used, it will get converted into an acceleration term, which will be used during
    # predicition. Note that if an acceleration measurement for the variable in question is available from one of the
    # inputs, the control term will be ignored.
    # Whether or not we use the control input during predicition. Defaults to false.
    use_control: true

    # Whether the input (assumed to be cmd_vel) is a geometry_msgs/Twist or geometry_msgs/TwistStamped message. Defaults to
    # false.
    stamped_control: false

    # The last issued control command will be used in prediction for this period. Defaults to 0.2.
    control_timeout: 0.2

    # Which velocities are being controlled. Order is vx, vy, vz, vroll, vpitch, vyaw.
    control_config: [true, false, false, false, false, true]

    # Places limits on how large the acceleration term will be. Should match your robot's kinematics.
    acceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 3.4]

    # Acceleration and deceleration limits are not always the same for robots.
    deceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 4.5]

    # If your robot cannot instantaneously reach its acceleration limit, the permitted change can be controlled with these
    # gains
    acceleration_gains: [0.8, 0.0, 0.0, 0.0, 0.0, 0.9]

    # If your robot cannot instantaneously reach its deceleration limit, the permitted change can be controlled with these
    # gains
    deceleration_gains: [1.0, 0.0, 0.0, 0.0, 0.0, 1.0]

    # [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
    # exposed as a configuration parameter. This matrix represents the noise we add to the total error after each
    # prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
    # However, if users find that a given variable is slow to converge, one approach is to increase the
    # process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
    # to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
    # ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
    # unspecified.
    # Note: the specification of covariance matrices can be cumbersome, so all matrix parameters in this package support
    # both full specification or specification of only the diagonal values.
    process_noise_covariance: [0.05, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.05, 0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.06, 0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.03, 0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.03, 0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.06, 0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.025, 0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.025, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.04, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.01, 0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.01, 0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.02, 0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.01, 0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.01, 0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.015]

    # [ADVANCED] This represents the initial value for the state estimate error covariance matrix. Setting a diagonal
    # value (variance) to a large value will result in rapid convergence for initial measurements of the variable in
    # question. Users should take care not to use large values for variables that will not be measured directly. The values
    # are ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the diagonal values below
    # if unspecified. In this example, we specify only the diagonal of the matrix.
    initial_estimate_covariance: [1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9]

    # [ADVANCED, UKF ONLY] The alpha and kappa variables control the spread of the sigma points. Unless you are familiar
    # with UKFs, it's probably a good idea to leave these alone.
    # Defaults to 0.001 if unspecified.
    alpha: 0.001
    # Defaults to 0 if unspecified.
    kappa: 0.0

    # [ADVANCED, UKF ONLY] The beta variable relates to the distribution of the state vector. Again, it's probably best to
    # leave this alone if you're uncertain. Defaults to 2 if unspecified.
    beta: 2.0