local_costmap:
  global_frame: odom
  robot_base_frame: base_link
  update_frequency: 5
  publish_frequency: 3.0
  static_map: false
  rolling_window: true
  width: 10.0
  height: 10.0
  resolution: 0.05
  transform_tolerance: 2


#local_costmap:
#  global_frame: odom
#  robot_base_frame: base_link
#  update_frequency: 15.0
#  publish_frequency: 10
#  static_map: false
#  rolling_window: true
#  width: 8.0
#  height: 8.0
#  resolution: 0.025
#  origin_x: -2.0
#  origin_y: -2.0


#  plugins:
#  - {name: obstacle_layer, type: "costmap_2d::VoxelLayer"}#

#  obstacle_layer:
#    observation_sources: point_cloud_sensor laser_scan_sensor
#    point_cloud_sensor: {
#      sensor_frame: camera_link,
#      data_type: PointCloud2, 
#      topic: /obstacles, 
#      expected_update_rate: 0.5, 
#      marking: true, 
#      clearing: false,
#      min_obstacle_height: .2,
#      max_obstacle_height: 99999.0}
    
#    laser_scan_sensor: {sensor_frame: camera_depth_frame, data_type: LaserScan, topic: scan, marking: true, clearing: true}
  #observation_sources: point_cloud_sensor

  # assuming receiving a cloud from rtabmap_ros/obstacles_detection node
  #point_cloud_sensor: {
  #  sensor_frame: base_link,
  #  data_type: PointCloud2, 
  #  topic: /planner_cloud, 
  #  expected_update_rate: 0.5, 
  #  marking: true, 
  #  clearing: false,
  #  min_obstacle_height: -99999.0,
  #  max_obstacle_height: 99999.0}
  #point_cloud_sensor: {
  #  sensor_frame: base_link,
  #  data_type: PointCloud2, 
  #  topic: /ground, 
  #  expected_update_rate: 0.5, 
  #  marking: false, 
  #  clearing: true,
  #  min_obstacle_height: -99999.0,
  #  max_obstacle_height: 99999.0
  #}
