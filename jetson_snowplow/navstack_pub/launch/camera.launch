<launch>

    <node pkg="tf" type="static_transform_publisher" name="imu_broadcaster" args="-.4064 .3048 .4572 0 0 0 base_link imu 50"/>
    <node pkg="tf" type="static_transform_publisher" name="camera_broadcaster" args=".03 0 .597 0 0 0 base_link camera_link 50"/>
    <!--node pkg="tf" type="static_transform_publisher" name="base_link_to_footprint" args="0.42 0 0.42 0 0 0 base_footprint base_link 50"/ -->
    <!--node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 50"/ -->
    <node pkg="tf" type="static_transform_publisher" name="gps_to_link" args="-0.2 0 0.45 0 0 0 base_link gps_link 50"/>
    <!--Launch odom, imu, gps-->
  
  
    <!-- subscribes to cmd_vel topic -->
    <!-- publishes odom topic with base_link frame -->
    <!-- broadcasts odom->base_footprint transform -->
    <!--include file="$(find roboteq_diff_driver)/launch/driver.launch">
    </include-->
    
    <!--node pkg="nmea_socket_pub" type="driver.py" name="trimble_gps"/-->

    

    <!-- publish /scan from depth camera->lidarscan -->

    <include file="$(find depthimage_to_laserscan)/launch/launchfile_sample.launch"/>
    <!--Filter & throttle raw pointcloud2 data from camera: launches throttle and obstacles_detection -->
    <include file="$(find navstack_pub)/launch/voxelgrid_throt.launch"/>



    <!--include file="$(find navstack_pub)/launch/ukf.launch"/-->
    <include file="$(find navstack_pub)/launch/single_ekf.launch"/>
      <!-- Map File CHANGE -->
    <arg name="map_file" default="/home/chase/catkin_ws/maps/trafton_garage_2.yaml"/>
    <!-- Map Server -->
    <!-- Publish: /map, /map_metadata TODO: add map file arg -->
    <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />
    <node pkg="rviz" type="rviz" name="rviz"  args="-d /home/chase/catkin_ws/maps/camera_rviz_config.rviz"/>
    
    <!--node name="move_base_flex" pkg="mbf_costmap_nav" type="mbf_costmap_nav" required="true" output="screen" clear_params="true">
        <remap from="odom" to="/odometry/filtered"/>
        <remap from="map"                             to="rtabmap/grid_map"/>
        <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="global_costmap"/>
        <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="local_costmap"/>
        <rosparam file="$(find navstack_pub)/param/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find navstack_pub)/param/global_costmap_params.yaml" command="load"  />
        <rosparam file="$(find navstack_pub)/param/base_local_planner_params.yaml" command="load" />
        <rosparam file="$(find navstack_pub)/param/mbf.yaml" command="load" />
        <!- -param name="base_global_planner" type="string" value="navfn/NavfnROS"/- ->
        <!- - param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/- ->
    </node>
    <node pkg="mbf_costmap_nav" type="move_base_legacy_relay.py" name="move_base"/ -->
   
    
    
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <!--remap from="openni_points" to="/planner_cloud"/-->
        <remap from="map" to="/rtabmap/grid_map"/>
        <remap from="odom" to="/odometry/filtered"/>
        <!-- remap from="move_base_simple/goal" to="/planner_goal"/-->
        <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find navstack_pub)/param/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find navstack_pub)/param/global_costmap_params.yaml" command="load" />
        <rosparam file="$(find navstack_pub)/param/base_local_planner_params.yaml" command="load"/>
        <!-- rosparam file="$(find navstack_pub)/param/move_base_params.yaml" command="load" /-->
        <param name="base_global_planner" type="string" value="navfn/NavfnROS"/>
        <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
        <param name="make_plan_clear_costmap" value="true"/>
        <param name="make_plan_add_unreachable_goal" value="false"/>
    </node>

    <!-- waypoint buffer-->

    <!--node pkg = 'buffer_waypoints' type="buffer_waypoints.py" name="buffer_waypoints"/-->
</launch>